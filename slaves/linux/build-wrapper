#!/bin/bash

# wrapper to run a jenkins job in a specific chroot.
#
# SUITE and ARCHITECTURE are passed in the environment
#
#
# SUITE is passed on to the scripts run in the chroot.
# Extra environment variables can be passed on by specifying their names on the command line.
#
#  - scripts to be run life in directories named after their jobname.
#  - in those dirs, the setup script or directory will be run outside the
#    schroot.  The SESSION_ID variable has the name of the session we just
#    created.
#  - the build script/directory will be run as an unprivileged user inside
#    the session.
#  - If the item in question is a directory, run-parts will be used on it.

set -u
set -e
set -x

fullpath=$(readlink -f "$0")
basedir=$(dirname "$fullpath")
. "$basedir/common.sh"

usage()
{
cat << EOF
usage: $0 [-t <sync-to-remote> [-t...]] [-f <sync-from-remote> [-f...]] [-k <env-variable> [-k]]
  -k <NAME>     keeps environment variable NAME when calling chroot session
  -t/-f <PATH>  sync PATH to/from remote when building remotely
EOF
}
declare -a sync_args
declare -a keep_env_names
while getopts "t:f:k:" OPTION; do
	case "$OPTION" in
		t)
			check_arg "sync-to-remote argument" "$OPTARG"
			sync_args+=("-t" "$OPTARG")
			;;
		f)
			check_arg "sync-from-remote argument" "$OPTARG"
			sync_args+=("-f" "$OPTARG")
			;;
		k)
			check_arg "keep-env argument" "$OPTARG"
			keep_env_names+=("$OPTARG")
			;;
		*)
			echo >&2 "Invalid option $OPTION"
			exit 1
	esac
done
shift $(($OPTIND - 1))
if [ "$#" -ge 1 ] ; then
	echo >&2 "Invalid arguments: $*"
	exit 1
fi

init_args
if [ "$(hostname -f)" != "${NODE_NAME:-}" ] ; then
  relay_to_remote "${sync_args[@]}" "slaves/linux/build-wrapper"
fi

# Check if we have an schroot by that name
base_chroot="$SUITE-$ARCHITECTURE-sbuild"
if ! schroot -l -c "$base_chroot" > /dev/null 2>&1; then
	echo >&2 "Invalid chroot: $base_chroot."
	exit 1
fi

jobdir="$basedir/$jobname"

# And check if we have build scripts
if ! [ -d "$jobdir" ]; then
	echo >&2 "$jobdir does not exist or is not a directory."
	exit 1
fi


# Setting up the build environment
trap 'cleanup' EXIT
echo "Prepare build environment."
chroot=$(schroot --chroot "$base_chroot" --begin-session)
if [ -z "$chroot" ]; then
	echo >&2 "Setting up chroot failed."
	exit 1
fi

# pass extra environment
declare -a keep_env
keep_env+=("SESSION_ID=$chroot")
keep_env_names+=("SUITE")
for i in "${keep_env_names[@]}"; do
	keep_env+=("$i=${!i}")
done

echo "Setup:"
f="$jobdir/setup"
if [ -d "$f" ]; then env "${keep_env[@]}" run-parts "$f";
                else env "${keep_env[@]}" "$f"; fi
echo "Build:"
keep_env+=("PATH=/usr/lib/ccache:/usr/local/bin:/usr/bin:/bin")
f="$jobdir/build"
if [ -d "$f" ]; then schroot --run-session --chroot "$chroot"         -- env "${keep_env[@]}" run-parts "$f";
                else schroot --run-session --chroot "$chroot"         -- env "${keep_env[@]}" "$f"; fi
