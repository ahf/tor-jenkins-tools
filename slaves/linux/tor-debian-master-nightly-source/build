#!/bin/bash

set -e
set -x
set -u

merge_release_maint() {
  local pkggitdir="$1"; shift
  local relbranch="$1"; shift
  local mntbranch="$1"; shift

  pushd .
  cd "$pkggitdir"

  git branch -t $relbranch origin/$relbranch || true
  git branch -t $mntbranch origin/$mntbranch || true

  local relrev=$(git rev-parse --short "$relbranch")
  if [ -z "$relrev" ]; then echo >&2 "Could not get revision of release branch $relbranch."; exit 1; fi
  local mntrev=$(git rev-parse --short "$mntbranch")
  if [ -z "$mntrev" ]; then echo >&2 "Could not get revision of maintenance branch $mntbranch."; exit 1; fi
  git checkout "$relbranch"
  git merge --no-commit "$mntbranch"

  pkgrev="$relrev+$mntrev"
  popd
}

fudge_upstream_version() {
  local pkggitdir="$1"; shift
  local configure_source
  local macroname
  local sedcmd

  pushd .
  cd "$pkggitdir"

  if [ -e configure.ac ]; then
    configure_source=configure.ac
    macroname=AC_INIT
    sedcmd='/^AC_INIT(/ s/\(-dev\)\?])/-dev])/'
  elif [ -e configure.in ]; then
    configure_source=configure.in
    macroname=AM_INIT_AUTOMAKE
    sedcmd='/^AM_INIT_AUTOMAKE(/ s/\(-dev\)\?)/-dev)/'
  else
    echo >&2 "Did not find configure.in or configure.ac"
    exit 1
  fi

  if [ "$(grep -c "$macroname" "$configure_source")" != 1 ]; then
    echo >&2 "Did not find exactly one $macroname"
    exit 1
  fi

  sed -i -e "$sedcmd" "$configure_source"

  if [ "$(grep -c "$macroname.*-dev" "$configure_source")" != 1 ]; then
    echo >&2 "Unexpect version in $configure_source."
    exit 1
  fi

  popd
}



thisdir=$(dirname "$0")
thisdir=$(readlink -f "$thisdir")
PATH="$thisdir/misc:$PATH"

pkg=tor
pkggitdir="${pkg}"
debgitdir="debian-${pkg}"

(cd "$pkggitdir" && git clean -dxf && git reset --hard HEAD)
(cd "$debgitdir" && git clean -dxf && git reset --hard HEAD)
rm -rf RESULT
rm -f *.tar.gz || true


branch="${branch:-master}"
case "$branch" in
  "master")
    pkgrev=$(cd "$pkggitdir" && git checkout -q "$branch" > /dev/null && git rev-parse --short=16 HEAD)
    distribution="$pkg-nightly-master"
    ;;
  "0.2.9")
    merge_release_maint "$pkggitdir" release-0.2.9 maint-0.2.9
    distribution="$pkg-nightly-0.2.9.x"
    ;;
  "0.2.8")
    merge_release_maint "$pkggitdir" release-0.2.8 maint-0.2.8
    distribution="$pkg-nightly-0.2.8.x"
    ;;
  "0.2.7")
    merge_release_maint "$pkggitdir" release-0.2.7 maint-0.2.7
    distribution="$pkg-nightly-0.2.7.x"
    ;;
  "0.2.6")
    merge_release_maint "$pkggitdir" release-0.2.6 maint-0.2.6
    distribution="$pkg-nightly-0.2.6.x"
    ;;
  "0.2.5")
    merge_release_maint "$pkggitdir" release-0.2.5 maint-0.2.5
    distribution="$pkg-nightly-0.2.5.x"
    ;;
  *)
    echo >&2 "Unknown/unsupported branch: '$branch'"
    exit 1
    ;;
esac

fudge_upstream_version "$pkggitdir"

debianrev=$(cd "$debgitdir" && git rev-parse --short HEAD)
ts="$(TZ=UTC date +%Y%m%dT%H%M%SZ)"

# build release tarball
#######################
cd "$pkggitdir"
./autogen.sh
mkdir build-tree
cd build-tree
../configure --disable-silent-rules --enable-gcc-warnings
if [ $(ls -1 *.tar.gz | wc -l) != 0 ] ; then
    echo >&2 "We already have one .tar.gz file before make dist. Confused."
    exit 1
fi
make dist
if [ $(ls -1 *.tar.gz | wc -l) != 1 ] ; then
    echo >&2 "Do not have exactly one .tar.gz file after make dist. Confused."
    exit 1
fi

tgz="$(echo -n *.tar.gz)"
mv -v "$tgz" ../..
cd ../..


# prepare debian source package
###############################
tardir="$(tar taf $tgz 2>/dev/null | head -n1)"
tardir="${tardir%%/}"
dir_version="${tardir##${pkg}-}"
build_version="${dir_version}-$ts"
ddir="$pkg-$build_version"

tar xaf "$tgz"
rm -f "$tgz"

[ "$tardir" = "$ddir" ] || mv "$tardir" "$ddir"
echo "\"$pkgrev\"" > "$ddir/micro-revision.i"

origtar="${pkg}_${build_version}.orig.tar.gz"
tar caf "$origtar" "$ddir"

cp -ra "$debgitdir"/debian "$ddir"
echo "\"$pkgrev+$debianrev\"" > "$ddir/debian/micro-revision.i"

( cd "$ddir" &&
  dch --force-distribution \
    --distribution "$distribution" \
    --force-bad-version \
    --newversion "$build_version-1" \
    "Automated build of "$pkg"-nightly at $ts, git revision $pkgrev with debiantree $debianrev."
)

dpkg-source -b $ddir $origtar

# build them ALL
################
. "$(which build-tor-sources)"
set -x
set +e
backport_all "$pkg" "$ddir" "$origtar" "$build_version-1"
include_orig="-sa"
for i in *.dsc; do
    dpkg-source -x "$i"
    (cd "$ddir" && dpkg-genchanges -S $include_orig) > ${i%.dsc}_src.changes
    include_orig=""
    rm -r "$ddir"
done

mkdir RESULT
for i in *changes; do dcmd mv -v $i RESULT; done
echo "$build_version" > RESULT/version
