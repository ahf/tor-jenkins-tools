#!/bin/bash

# helper script to build tor debian releases

# Copyright 2007,2008,2009,2010,2011,2012,2013 Peter Palfrader
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

assert_files_dont_exist () {
	local pkg="$1"; shift
	local debian_version="$1";
	if [ -z "$debian_version" ]; then
		echo "assert_files_dont_exist called without debian_version" >&2
		exit 1;
	fi

	if [ -e "${pkg}_$debian_version.diff.gz" ] ; then
		echo "${pkg}_$debian_version.diff.gz already exists" >&2
		exit 1;
	fi
	if [ -e "${pkg}_$debian_version.dsc" ] ; then
		echo "${pkg}_$debian_version.dsc already exists" >&2
		exit 1;
	fi
	if [ -e "${pkg}_$debian_version""_amd64.deb" ] ; then
		echo "${pkg}_$debian_version""_amd64.deb already exists" >&2
		exit 1;
	fi
	if [ -e "${pkg}_$debian_version""_amd64.changes" ] ; then
		echo "${pkg}_$debian_version""_amd64.changes already exists" >&2
		exit 1;
	fi
}

get_debian_version() {
	local dir="$1"; shift
	local which="${1:-}"; shift

	if [ -z "$which" ]; then
		( cd $dir && dpkg-parsechangelog | grep-dctrl -n -s Version '' )
	else
		local v=$(get_debian_version $dir)
		case "$which" in
			upstream) echo "${v%-*}" ;;
			debrev) echo "${v##*-}" ;;
			*)
				echo >&2 "Unknown key '$which' in get_debian_version"
				exit 1
		esac
	fi
}

# remove_completely ... 0 replace hardening-includes with hardening-wrapper
#                       1 get rid entirely
hardening_backport() {
	local remove_completely="$1"

	sed -i -e '/^Build-Depends/ s/, *hardening-includes//' debian/control
	if [ "$remove_completely" = 0 ]; then
		sed -i -e '/^Build-Depends/ s/$/, hardening-wrapper/' debian/control
	fi

	if [ "$remove_completely" = 0 ]; then
		sed -i -e 's#include /usr/share/hardening-includes/hardening.make#export DEB_BUILD_HARDENING=1#' debian/rules
		sed -i -e '/export DEB_BUILD_HARDENING=1/ a export DEB_BUILD_HARDENING_DEBUG=1' debian/rules
	else
		sed -i -e 's#include /usr/share/hardening-includes/hardening.make##' debian/rules
	fi

	if [ "$remove_completely" = 0 ]; then
		dch --append "Replace hardening-includes use with hardening-wrapper."
	else
		dch --append "Completely remove hardening-includes use."
	fi
}

remove_apparmor() {
	local builddep_only="${1:-}"

	if grep -q dh-apparmor debian/control; then
		sed -i -e '/^Build-Depends/ s/, *dh-apparmor//' debian/control
		if [ "$builddep_only" = 1 ]; then
			dch --append "Remove dh-apparmor build dependency for backport."
		else
			sed -i -e 's/dh_apparmor/# &/' debian/rules
			sed -i -e 's;install.*etc/apparmor.d;# &;' debian/rules
			dch --append "Remove apparmor support for backport."
		fi
	fi
}

remove_libseccomp() {
	if grep -q libseccomp-dev debian/control; then
		sed -i -e '/^Build-Depends/ s/, *libseccomp-dev\( *\[[^]]*\]\)\?//' debian/control
		dch --append "Remove libseccomp-dev build dependency for backport."
	fi
}

remove_systemd() {
	if grep -q dh-systemd debian/control; then
		sed -i -e '/^Build-Depends/ s/, *dh-systemd\( *\[[^]]*\]\)\?//' debian/control
		dch --append "Remove dh-systemd build dependency for backport."
	fi
	if grep -q -- "--with systemd" debian/rules; then
		sed -i -e '/--with systemd/ d' debian/rules
		dch --append "Remove --with systemd from debian/rules"
	fi
	if grep -q libsystemd-dev debian/control; then
		sed -i -e '/^Build-Depends/ s/, *libsystemd-dev\( *\[[^]]*\]\)\?//' debian/control
		dch --append "Remove libsystemd-dev build dependency for backport."
	fi
	if grep -q pkg-config debian/control; then
		sed -i -e '/^Build-Depends/ s/, *pkg-config\( *\[[^]]*\]\)\?//' debian/control
		dch --append "Remove pkg-configu build dependency for backport."
	fi
	if grep -q -- "--enable-systemd" debian/rules; then
		sed -i -e '/--enable-systemd/ d' debian/rules
		dch --append "Remove --enable-systemd from debian/rules"
	fi
	if grep -q -- "^debian/tor\.service[[:space:]]" debian/tor.install; then
		sed -i -e '/^debian\/tor\.service[[:space:]]/ d' debian/tor.install
		dch --append "Remove debian/tor.service from debian/tor.install"
	fi
	if [ -e debian/tor.service ]; then
		rm -f debian/tor.service
		dch --append "Remove debian/tor.service"
	fi
	if grep -q -- "^debian/systemd/" debian/tor.install; then
		sed -i -e '/^debian\/systemd\// d' debian/tor.install
		dch --append "Remove debian/systemd/* from debian/tor.install"
	fi
	if grep -q -- "chmod +x debian/systemd/tor-generator" debian/rules; then
		sed -i -e '/chmod +x debian\/systemd\/tor-generator/ d' debian/rules
		dch --append "Remove chmod +x debian/systemd/tor-generator from debian/rules"
	fi
	if [ -e debian/systemd ]; then
		rm -fr debian/systemd
		dch --append "Remove debian/systemd"
	fi
}

bp1() {
	local pkg="$1"; shift
	local dir="$1"; shift
	local sid_debian_version="$1"; shift
	local dist="$1"; shift

	dpkg-source -x ${pkg}_$sid_debian_version.dsc
	(cd $dir; backport $dist)
}
bp2() {
	local pkg="$1"; shift
	local dir="$1"; shift
	local origtar="$1"; shift

	local debian_version=$(get_debian_version $dir)
	assert_files_dont_exist $pkg $debian_version
	dpkg-source -b $dir $origtar
	rm -r $dir
}

backport_all() {
	local pkg="$1"; shift
	local dir="$1"; shift
	local origtar="$1"; shift
	local sid_debian_version="$1"; shift

	# SID
	#################################################
	# null

	# STRETCH
	#################################################
	bp1 $pkg $dir $sid_debian_version stretch
	bp2 $pkg $dir $origtar

	# JESSIE
	#################################################
	bp1 $pkg $dir $sid_debian_version jessie
	bp2 $pkg $dir $origtar

	# WHEEZY
	#################################################
	bp1 $pkg $dir $sid_debian_version wheezy
	(cd $dir; remove_libseccomp)
	(cd $dir; remove_systemd)
	bp2 $pkg $dir $origtar

	# SQUEEZE
	#################################################
	#bp1 $pkg $dir $sid_debian_version squeeze
	#(cd $dir; remove_apparmor)
	#(cd $dir; remove_libseccomp)
	#(cd $dir; remove_systemd)
	#bp2 $pkg $dir $origtar


	# PRECISE  (EOL: April 2017)
	#################################################
	bp1 $pkg $dir $sid_debian_version precise
	(cd $dir; remove_libseccomp)
	(cd $dir; remove_systemd)
	bp2 $pkg $dir $origtar

	# TRUSTY (EOL: April 2019)
	#################################################
	bp1 $pkg $dir $sid_debian_version trusty
	(cd $dir; remove_systemd)
	bp2 $pkg $dir $origtar

	# VIVID (EOL: Jan 2016)
	#################################################
	bp1 $pkg $dir $sid_debian_version vivid
	bp2 $pkg $dir $origtar

	# WILY (EOL: Jul 2016)
	#################################################
	bp1 $pkg $dir $sid_debian_version wily
	bp2 $pkg $dir $origtar


	#################################################
	## BPO
	#################################################

	#if [ "${DO_BPO:-}" = 1 ]; then
	#	# SQUEEZE-BPO
	#	#################################################
	#	bp1 $pkg $dir $sid_debian_version squeeze-bpo
	#	(cd $dir; remove_libseccomp)
	#	(cd $dir; remove_systemd)
	#	bp2 $pkg $dir $origtar
	#
	#	mkdir bpo
	#	mv *'~bpo'* bpo/
	#fi
}

main() {
	local origtar="$1"; shift
	local deb_revision="$1"; shift
	local gitdir="$1"; shift
	local pkg="$1"; shift

	[ -d local-build ] || mkdir local-build

	if [ -z "$origtar" ] ; then
		echo "Usage: $0 <orig.tar.gz> [version]" >&2
		exit 1;
	fi


	if [ ! -e "$origtar" ] ; then
		echo "$origtar does not exist." >&2
		exit 1;
	fi

	if [ "${origtar#${pkg}-}" != $origtar ]; then
		ver="$origtar"
		ver=${ver#${pkg}-}
		ver=${ver%.tar.gz}
		neworig="${pkg}_$ver.orig.tar.gz"
		if ! [ -e "$neworig" ]; then
			ln -v "$origtar" "$neworig"
		fi
		echo "Using $neworig instead of $origtar"
		origtar="$neworig"
	fi

	local dir
	local dir_version
	dir=`tar tzf $origtar 2>/dev/null | head -n1`
	dir="${dir%%/}"
	dir_version="${dir##${pkg}-}"
	if [ -e "$dir" ] ; then
		echo "$dir already exists." >&2
		exit 1;
	fi
	tar xzf $origtar
	git clone -n -s "$gitdir" git-"$dir"
	local tag="debian-${pkg}-$dir_version-${deb_revision//\~/_}"
	(cd "git-$dir" && git checkout $tag)
	if diff -qr "git-$dir" "$dir" --exclude .git  | grep -v '^Only in ' | grep --color .; then
		echo "Differenced detected."
		exit 1
	fi
	(cd "git-$dir" && echo "\"`git rev-parse --short=16 "$tag"`\"" > "debian/micro-revision.i")
	cp -av "git-$dir/debian" "$dir"
	rm -rf "git-$dir"


	debian_upstream_version=$(get_debian_version $dir upstream)
	if [ "$origtar" != "${pkg}_$debian_upstream_version.orig.tar.gz" ] ; then
		echo "possible mismatch: $origtar but $debian_upstream_version in debian/changelog" >&2
		exit 1;
	fi

	debian_version=$(get_debian_version $dir)
	sid_debian_version="$debian_version"
	assert_files_dont_exist $pkg $debian_version
	dpkg-source -b $dir $origtar
	rm -r $dir



	# local
	#################################################
	cd local-build
	dpkg-source -x ../${pkg}_$debian_version.dsc
	cd ${pkg}-$debian_upstream_version
	remove_apparmor
	debuild -j8 -rfakeroot -uc -us
	cd ../..


	backport_all "$pkg" "$dir" "$origtar" "$sid_debian_version"

	echo
	echo "All done"
}

# this is hardcoded to weasel's directory layout. sorry.
case "$(basename $0)" in
	build-tor-sources)
		set -e
		set -x
		GITDIR="$HOME/projects/tor/tor"
		PKG="tor"
		DO_BPO=1
		main "${1:-}" ${2:-1} $GITDIR $PKG
		;;
esac
